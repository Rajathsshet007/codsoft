import tkinter as tk
from tkinter import messagebox

# This function stores sample datasets that  containing categories, subcategories, and items with descriptions like movie,book and games
data = [
    {"title": "The Matrix", "category": "Movie", "subcategory": "Thriller", "description": "A computer hacker learns about reality."},
    {"title": "Inception", "category": "Movie", "subcategory": "Thriller", "description": "A thief enters dreams to steal secrets."},
    {"title": "Se7en", "category": "Movie", "subcategory": "Thriller", "description": "Two detectives hunt a serial killer inspired by the seven deadly sins."},
    {"title": "Gone Girl", "category": "Movie", "subcategory": "Thriller", "description": "A husband becomes the prime suspect when his wife goes missing."},
    {"title": "Prisoners", "category": "Movie", "subcategory": "Thriller", "description": "A father takes desperate measures to find his kidnapped daughter."},
    {"title": "Shutter Island", "category": "Movie", "subcategory": "Thriller", "description": "A U.S. Marshal investigates a disappearance at a remote asylum."},
    {"title": "The Silence of the Lambs", "category": "Movie", "subcategory": "Thriller", "description": "A young FBI trainee seeks the help of a brilliant but manipulative cannibal."},
    {"title": "The Dark Knight", "category": "Movie", "subcategory": "Action", "description": "Batman faces the Joker in Gotham."},
    {"title": "Avengers: Endgame", "category": "Movie", "subcategory": "Action", "description": "The Avengers assemble to reverse the devastation caused by Thanos."},
    {"title": "Avengers: Infinity War", "category": "Movie", "subcategory": "Action", "description": "The Avengers face their greatest enemy, Thanos, to save the universe."},
    {"title": "1984", "category": "Book", "subcategory": "Storybook", "description": "A dystopian novel about surveillance."},
    {"title": "The Lean Startup", "category": "Book", "subcategory": "Business", "description": "A guide to starting a successful business."},
    {"title": "Rich Dad Poor Dad", "category": "Book", "subcategory": "Business", "description": "A personal finance classic by Robert Kiyosaki that contrasts two different approaches to money and investing."},
    {"title": "Mario Kart", "category": "Game", "subcategory": "CarGames", "description": "A fun racing game with beloved characters."},
     {"title": "Freefire", "category": "Game", "subcategory": "GunGames", "description": "A mission oriented multiplayer game."},
     {"title": "Call of duty", "category": "Game", "subcategory": "GunGames", "description": "A mission oriented multiplayer game."},
    {"title": "Need for Speed: Most Wanted", "category": "Game", "subcategory": "CarGames", "description": "A high-speed racing game featuring police chases and open-world exploration."},
]

# This function is used  to retrieve items based on the selected subcategory
def recommend_items(subcategory):
    return [
        {"title": item["title"], "description": item["description"]}
        for item in data if item["subcategory"] == subcategory
    ][:3]  # Limit to 3 items

# This function is used to display recommendations in a new window
def get_recommendations():
    selected_subcategory = subcategory_var.get()
    if not selected_subcategory:
        messagebox.showerror("Error", "Please select a subcategory.")
        return

    recommendations = recommend_items(selected_subcategory)
    if not recommendations:
        messagebox.showinfo("Recommendations", f"No recommendations found for '{selected_subcategory}'.")
        return

    # This function is used create a new window to display recommendations
    result_window = tk.Toplevel(root)
    result_window.title("Recommendations")
    result_window.geometry("500x400")

    #  This function is used to display title for recommendations
    title_label = tk.Label(result_window, text=f"Recommendations for '{selected_subcategory}'", font=("Arial", 16, "bold"))
    title_label.pack(pady=10)

    #  This displays the recommendations in a text widget
    text_widget = tk.Text(result_window, wrap="word", font=("Arial", 12))
    text_widget.pack(expand=True, fill="both", padx=10, pady=10)

    # This code is used to add recommendations to the text widget
    for rec in recommendations:
        text_widget.insert("end", f"Title: {rec['title']}\nDescription: {rec['description']}\n\n")
    text_widget.config(state="disabled")

    #  This code is used to add a close button
    close_button = tk.Button(result_window, text="Close", command=result_window.destroy)
    close_button.pack(pady=10)

# We use this function to update subcategories based on the selected category
def update_subcategories(*args):
    selected_category = category_var.get()
    subcategories = sorted({item["subcategory"] for item in data if item["category"] == selected_category})
    subcategory_menu["menu"].delete(0, "end")

    for sub in subcategories:
        subcategory_menu["menu"].add_command(label=sub, command=lambda value=sub: subcategory_var.set(value))

    subcategory_var.set(subcategories[0] if subcategories else "")

#  This code is used for main application window
root = tk.Tk()
root.title("Recommendation System")
root.geometry("600x400")

# This code is used for Category selection
category_label = tk.Label(root, text="Step 1: Select a category", font=("Arial", 14, "bold"))
category_label.pack(pady=10)

category_var = tk.StringVar(value="Movie")
category_var.trace("w", update_subcategories)

category_menu = tk.OptionMenu(root, category_var, "Movie", "Book", "Game")
category_menu.config(font=("Arial", 12), width=20)
category_menu.pack(pady=10)

#  This code is used for Subcategory selection
subcategory_label = tk.Label(root, text="Step 2: Select a subcategory", font=("Arial", 14, "bold"))
subcategory_label.pack(pady=10)

subcategory_var = tk.StringVar()
subcategory_menu = tk.OptionMenu(root, subcategory_var, "")
subcategory_menu.config(font=("Arial", 12), width=20)
subcategory_menu.pack(pady=10)

#  This code helps in working of recommendation button
recommend_button = tk.Button(root, text="Get Recommendations", command=get_recommendations, font=("Arial", 14, "bold"))
recommend_button.pack(pady=20)

#This code  initialize the subcategory menu
update_subcategories()

#  This code runs the main application loop
root.mainloop()
